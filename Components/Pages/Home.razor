@page "/"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS
@using Microsoft.EntityFrameworkCore.Metadata.Conventions
@using PortofolioApi.Domain.DTOs
@using Microsoft.AspNetCore.Components


<!-- HERO -->
<header id="home" class="hero">
  <div class="layer layer-back"></div>
  <div class="layer layer-mid"></div>
  <div class="layer layer-front">
    <div class="hero-content">
      <div class="hero-text">
        <h1>@portfolio.Prenom</h1>
        <p>@portfolio.resume</p>
        <a href="#projects" class="btn btn-hero">Voir mes projets</a>
      </div>
      <div class="hero-image">
        <img src="images/@portfolio.UserImage" alt="@portfolio.Nom @portfolio.Prenom"  loading="lazy"/>
      </div>
    </div>
  </div>
</header>


  
<!-- ABOUT -->
<section id="about" class="fade">
  <h2>À propos de moi</h2>
  <p>@portfolio.APropos</p>
</section>


<!-- PROJECTS -->
<section id="projects" class="fade">
  <h2>Mes projets</h2>
  <div class="projects-grid">
    @foreach(var proj in portfolio.ProjetDTOs)
    {
        <div class="project-card">
          <img src="/images/@proj.ImageProjet" alt="@proj.TitreProjet">
          <div class="project-info">
            <h3>@proj.TitreProjet</h3>
            <p>@proj.ResumerProjet</p>
            <button class="btn-small open-modal" data-project="@proj.IdProjet.ToString()">Voir détails</button>

          </div>
        </div>

        <div id="modal-@proj.IdProjet.ToString()" class="modal">
            <div class="modal-content">
            <span class="close">&times;</span>
            <h3>@proj.TitreProjet</h3>
            <p>@(new MarkupString(proj.DetailProjet.Replace("\\n", "<br/>")))</p>
          </div>
        </div>
    }
  </div>
</section>

<section id="skills" class="fade">
  <h2>Compétences</h2>
  <div class="skills-grid">
    <!-- Développement Desktop -->
    @foreach(var competence in portfolio.CompetenceDTOs)
    {
      <div class="skill">@competence.Nom</div>  
    }
  </div>
</section>

<!-- EXPERIENCE -->
<section id="experience" class="fade">
  <h2>Expériences</h2>
  <div class="timeline">
  @foreach(var exp in portfolio.ExperienceDTOs)
  {
    <div class="timeline-item">
      <div class="date">@exp.DateDebut.Year - @(exp.DateFin.HasValue ? exp.DateFin.Value.ToString("yyyy") : "Présent")</div>
      <div class="content">
        <h3>@exp.TitreExperience</h3>
        <p>@(new MarkupString(exp.DetailExperience.Replace("\\n", "<br/>")))</p>
      </div>
    </div>
  }
  </div>
</section>


<!-- CONTACT -->
<section id="contact" class="fade">
  <h2>Contact</h2>
  <form>
    <input @bind="emailRequest.Name" type="text" placeholder="Nom" required>
    <input @bind="emailRequest.To" type="email" placeholder="Email" required>
    <input @bind="emailRequest.Subject" type="text" placeholder="Sujet" required>
    <textarea @bind="emailRequest.Body" placeholder="Message" required></textarea>
    <button @onclick="Envoyer"  class="btn btn-hero">Envoyer</button>
  </form>
  <div class="socials">
    @if(portfolio.ContactDTOs != null)
      {
          @foreach (var contact in portfolio.ContactDTOs)
          {
            if (contact.TypeContact.ToUpper() == "LINKEDIN")
            {
              <a href="@contact.AdresseContact" 
                target="_blank" 
                rel="noopener noreferrer" 
                aria-label="Profil LinkedIn de Rindra Niaina">
                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="#0077B5" role="img" aria-hidden="true">
                  <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-10h3v10zm-1.5-11.268c-.966 0-1.75-.784-1.75-1.75s.784-1.75 1.75-1.75 1.75.784 1.75 1.75-.784 1.75-1.75 1.75zm13.5 11.268h-3v-5.604c0-1.337-.025-3.065-1.868-3.065-1.868 0-2.154 1.459-2.154 2.968v5.701h-3v-10h2.881v1.367h.041c.401-.757 1.379-1.555 2.841-1.555 3.036 0 3.598 1.997 3.598 4.592v5.596z"/>
                </svg>
              </a>
            }
            if (contact.TypeContact.ToUpper() == "GITHUB")
            {
              <a href="@contact.AdresseContact"  target="_blank" rel="noopener noreferrer" aria-label="Profil GitHub de Rindra Niaina">
                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="#0077B5">
                  <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.387.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61-.546-1.387-1.333-1.757-1.333-1.757-1.089-.745.084-.729.084-.729 1.205.084 1.84 1.236 1.84 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.418-1.305.762-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.468-2.38 1.235-3.22-.123-.303-.535-1.523.117-3.176 0 0 1.008-.322 3.3 1.23a11.52 11.52 0 0 1 3-.405c1.02.005 2.045.138 3 .405 2.29-1.552 3.295-1.23 3.295-1.23.653 1.653.242 2.873.12 3.176.77.84 1.233 1.91 1.233 3.22 0 4.61-2.807 5.625-5.48 5.922.43.372.823 1.102.823 2.222 0 1.606-.015 2.898-.015 3.293 0 .32.216.694.825.576C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/>
                </svg>
              </a>
            }
          }
      }
  </div>
</section>

<!-- Chatbot flottant -->
<div class="chatbot-container">
  <div class="chat-header" id="chat-toggle">💬 Assistance</div>
  <div class="chat-body" id="chat-body">
      <div class="chat-messages" id="chat-messages">
        @foreach(var msg in ChatResponses)
          {
            <div class="message @(true ? "user" : "bot")">
                <span>@msg.UserMessage</span>
            </div>
            <div class="message @(false ? "user" : "bot")">
                <span>@msg.BotResponse</span>
            </div>
          }
      </div>
      <div class="chat-input">
        <input type="text" placeholder="Écrire un message..." id="chat-input-field" 
          @bind="UserMessage" @bind:event="oninput"
          @onkeypress="@(async e => { if(e.Key == "Enter") await SendMessage(); })"/>
        <button  @onclick="SendMessage" id="chat-send-btn">➤</button>
      </div>
  </div>
</div>



@code {
  private string message = string.Empty;
  private MailDTO emailRequest = new MailDTO();
  private HttpClient http;
  private UtilisateurDTO portfolio = new UtilisateurDTO();
  private string UserMessage { get; set; } = "";
  private List<ChatEntry> ChatResponses { get; set; } = new();
  private bool _initialized;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender && !_initialized)
    {
        _initialized = true;
        //await JS.InvokeVoidAsync("siteInterop.initAll");
        //await JS.InvokeAsync<string>("themeManager.applyTheme");
        try
    {
      string url = $"api/portfolio";
      portfolio = await Http.GetFromJsonAsync<UtilisateurDTO>(url)??null;
      Console.WriteLine("Portfolio:");
      //Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(portfolio));
      StateHasChanged();
    }catch(Exception ex)
    {
        message = $"Erreur: {ex.Message} {ex.StackTrace}";
        Console.WriteLine(message);
    }
    }
}


  /*protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JS.InvokeVoidAsync("siteInterop.initAll");
      await JS.InvokeAsync<string>("themeManager.applyTheme");
    }
  }*/
  
  private async Task SendMessage()
  {
    if (string.IsNullOrWhiteSpace(UserMessage))
      return;

    // Sauvegarder le message utilisateur
    var userMsg = UserMessage;

    try
    {
      var response = await Http.PostAsJsonAsync("api/chat", new { message = userMsg });

      if (response.IsSuccessStatusCode)
      {
        var chatResponse = await response.Content.ReadFromJsonAsync<ChatResponse>();
                
        ChatResponses.Add(new ChatEntry
        {
          UserMessage = userMsg,
          BotResponse = chatResponse?.Message ?? "Aucune réponse"
        });
      }
      else
      {
        ChatResponses.Add(new ChatEntry
        {
          UserMessage = userMsg,
          BotResponse = $"Erreur : {response.StatusCode}"
        });
      }
    }
    catch (Exception ex)
    {
      ChatResponses.Add(new ChatEntry
      {
        UserMessage = userMsg,
        BotResponse = $"Exception : {ex.Message}"
      });
    }

        // Ne pas réinitialiser la réponse complète, seulement le champ input
        UserMessage = "";
  }

  private class ChatEntry
  {
    public string UserMessage { get; set; } = "";
    public string BotResponse { get; set; } = "";
  }

  private async Task Envoyer()
{
    if (emailRequest == null)
        return;

    try
    {
        // URL propre, pas de "?" ajouté
        var response = await Http.PostAsJsonAsync("api/mail/sendgrid", emailRequest);

        MailResponseDTO result = null;

        try
        {
            // Essayer de lire la réponse JSON
            result = await response.Content.ReadFromJsonAsync<MailResponseDTO>();
        }
        catch
        {
            // Si JSON invalide, lire le texte brut
            var text = await response.Content.ReadAsStringAsync();
            result = new MailResponseDTO
            {
                Message = string.IsNullOrWhiteSpace(text) ? "Erreur inconnue" : text
            };
        }

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine(result?.Message);
        }
        else
        {
            Console.WriteLine("Erreur : " + result?.Message);
            if (!string.IsNullOrEmpty(result?.Error))
            {
                Console.WriteLine("Détails : " + result.Error);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception : " + ex.Message);
    }
}




  /*private bool _alreadyLoaded = false;
  protected override async Task OnInitializedAsync()
  {
    if (_alreadyLoaded) return;
    _alreadyLoaded = true;

    
    try
    {
      string url = $"api/portfolio";
      portfolio = await Http.GetFromJsonAsync<UtilisateurDTO>(url)??null;
      Console.WriteLine("Portfolio:");
      //Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(portfolio));
    }catch(Exception ex)
    {
        message = $"Erreur: {ex.Message} {ex.StackTrace}";
        Console.WriteLine(message);
    }
  }*/
}