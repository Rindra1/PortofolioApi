@page "/"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS
@using Microsoft.EntityFrameworkCore.Metadata.Conventions
@using PortofolioApi.Domain.DTOs


<!-- HERO -->
<header id="home" class="hero">
  <div class="layer layer-back"></div>
  <div class="layer layer-mid"></div>
  <div class="layer layer-front">
    <div class="hero-content">
      <div class="hero-text">
        <h1>@portfolio.Prenom</h1>
        <p>@portfolio.resume</p>
        <a href="#projects" class="btn btn-hero">Voir mes projets</a>
      </div>
      <div class="hero-image">
        <img src="images/@portfolio.UserImage" alt="Rindra Niaina" />
      </div>
    </div>
  </div>
</header>


  
<!-- ABOUT -->
<section id="about" class="fade">
  <h2>À propos de moi</h2>
  <p>@portfolio.APropos</p>
</section>


<!-- PROJECTS -->
<section id="projects" class="fade">
  <h2>Mes projets</h2>
  <div class="projects-grid">
    @foreach(var proj in portfolio.ProjetDTOs)
    {
        <div class="project-card">
          <img src="/images/@proj.ImageProjet" alt="@proj.TitreProjet">
          <div class="project-info">
            <h3>@proj.TitreProjet</h3>
            <p>@proj.ResumerProjet</p>
            <button class="btn-small open-modal" data-project="@proj.IdProjet.ToString()">Voir détails</button>

          </div>
        </div>

        <div id="modal-@proj.IdProjet.ToString()" class="modal">
            <div class="modal-content">
            <span class="close">&times;</span>
            <h3>@proj.TitreProjet</h3>
            <p>
              @proj.DetailProjet
            </p>
          </div>
        </div>
    }
  </div>
</section>

<section id="skills" class="fade">
  <h2>Compétences</h2>
  <div class="skills-grid">
    <!-- Développement Desktop -->
    <div class="skill">C# / VB.NET / WinForms</div>

    <!-- Développement Web -->
    <div class="skill">.NET Core 8 / ASP.NET Core</div>
    <div class="skill">ASP.NET Web Forms / WCF / REST (JSON) / Web API / Swagger</div>
    <div class="skill">HTML / CSS / Bootstrap / jQuery / Ajax</div>

    <!-- Bases de données et ORM -->
    <div class="skill">SQL Server / SQLite / MySQL / Access</div>
    <div class="skill">Entity Framework / LINQ</div>

    <!-- Outils et versioning -->
    <div class="skill">Git / GitHub / SVN</div>
  </div>
</section>

<!-- EXPERIENCE -->
<section id="experience" class="fade">
  <h2>Expériences</h2>
  <div class="timeline">
  @foreach(var exp in portfolio.ExperienceDTOs)
  {
    <div class="timeline-item">
      <div class="date">@exp.DateDebut.Year - @(exp.DateFin.HasValue ? exp.DateFin.Value.ToString("yyyy") : "Présent")</div>
      <div class="content">
        <h3>@exp.TitreExperience</h3>
        <p>@exp.DetailExperience</p>
      </div>
    </div>
  }
  </div>
</section>


<!-- CONTACT -->
<section id="contact" class="fade">
  <h2>Contact</h2>
  <form>
    <input @bind="emailRequest.Name" type="text" placeholder="Nom" required>
    <input @bind="emailRequest.To" type="email" placeholder="Email" required>
    <input @bind="emailRequest.Subject" type="text" placeholder="Sujet" required>
    <textarea @bind="emailRequest.Body" placeholder="Message" required></textarea>
    <button @onclick="Envoyer"  class="btn btn-hero">Envoyer</button>
  </form>
  <div class="socials">
    @if(portfolio.ContactDTOs != null)
      {
          @foreach (var contact in portfolio.ContactDTOs)
          {
            if (contact.TypeContact.ToUpper() == "LINKEDIN")
            {
              <a href="@contact.AdresseContact"  target="_blank" rel="noopener noreferrer">LinkedIn</a>
            }
            if (contact.TypeContact.ToUpper() == "GITHUB")
            {
              <a href="@contact.AdresseContact"  target="_blank" rel="noopener noreferrer">GitHub</a>
            }
          }
      }
  </div>
</section>



@code {
  private string message = string.Empty;
  private MailDTO emailRequest = new MailDTO();
  private HttpClient http;
  private UtilisateurDTO portfolio = new UtilisateurDTO();
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JS.InvokeVoidAsync("siteInterop.initAll");
    }
  }

  private async Task Envoyer()
{
    var response = await Http.PostAsJsonAsync("api/mail/sendgrid", emailRequest);

    MailResponseDTO result = null;

    try
    {
      
        result = await response.Content.ReadFromJsonAsync<MailResponseDTO>();
    }
    catch
    {
        // Si JSON invalide, lire le texte brut
        var text = await response.Content.ReadAsStringAsync();
        result = new MailResponseDTO { Message = string.IsNullOrWhiteSpace(text) ? "Erreur inconnue" : text };
    }

    if (response.IsSuccessStatusCode)
    {
        Console.WriteLine(result?.Message);
    }
    else
    {
        Console.WriteLine("Erreur : " + result?.Message);
        if (!string.IsNullOrEmpty(result?.Error))
        {
            Console.WriteLine("Détails : " + result.Error);
        }
    }
}




  protected override async Task OnInitializedAsync()
  {
    try
    {
      string url = $"api/portfolio";
      portfolio = await Http.GetFromJsonAsync<UtilisateurDTO>(url)??null;
      //Console.WriteLine("Portfolio:");
      //Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(portfolio));
    }catch(Exception ex)
    {
        message = $"Erreur: {ex.Message} {ex.StackTrace}";
    }
  }


  class Project {
    public string Title { get; set; }
    public string Description { get; set; }
    public List<string> Images { get; set; }
  }

  List<Project> Projects = new() {
    new Project { Title="Demo 1", Description="...", Images = new List<string>{ "images/sary.jpg", "images/sary1.png" } },
    new Project { Title="Demo 2", Description="...", Images = new List<string>{ "images/img3.jpg", "images/img4.jpg" } }
  };

  /*async Task OpenModal(List<string> images)
  {
    // Appelle la fonction JS exposée : modalInterop.showModal(images)
    await JS.InvokeVoidAsync("modalInterop.showModal", images);
  }*/
}