// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortofolioApi.Infrastructure.Data;

#nullable disable

namespace PortofolioApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250925115718_InitialCreate14")]
    partial class InitialCreate14
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("IdContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdresseContact")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeContact")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UtilisateursIdUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdContact");

                    b.HasIndex("UtilisateursIdUser");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Lien", b =>
                {
                    b.Property<int>("IdLien")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheminLien")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdProjet")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdLien");

                    b.HasIndex("IdProjet");

                    b.ToTable("Lien");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Projet", b =>
                {
                    b.Property<int>("IdProjet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DetailProjet")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageProjet")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitreProjet")
                        .HasColumnType("TEXT");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdProjet");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Projet");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.UserLogin", b =>
                {
                    b.Property<int>("IdUserLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdUserLogin");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Utilisateur", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("APropos")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdUserLogin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserImage")
                        .HasColumnType("TEXT");

                    b.HasKey("IdUser");

                    b.HasIndex("IdUserLogin")
                        .IsUnique();

                    b.ToTable("Utilisateur");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Contact", b =>
                {
                    b.HasOne("PortofolioApi.Domain.Entities.Utilisateur", "Utilisateurs")
                        .WithMany("Contact")
                        .HasForeignKey("UtilisateursIdUser");

                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Lien", b =>
                {
                    b.HasOne("PortofolioApi.Domain.Entities.Projet", "Projets")
                        .WithMany("Lien")
                        .HasForeignKey("IdProjet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projets");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Projet", b =>
                {
                    b.HasOne("PortofolioApi.Domain.Entities.Utilisateur", "Utilisateur")
                        .WithMany("Projets")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Utilisateur", b =>
                {
                    b.HasOne("PortofolioApi.Domain.Entities.UserLogin", "UserLogin")
                        .WithOne()
                        .HasForeignKey("PortofolioApi.Domain.Entities.Utilisateur", "IdUserLogin")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Projet", b =>
                {
                    b.Navigation("Lien");
                });

            modelBuilder.Entity("PortofolioApi.Domain.Entities.Utilisateur", b =>
                {
                    b.Navigation("Contact");

                    b.Navigation("Projets");
                });
#pragma warning restore 612, 618
        }
    }
}
